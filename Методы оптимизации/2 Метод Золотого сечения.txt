import numpy as np
import matplotlib.pyplot as plt

# Определение функции
def f(x):
    return x**2 - 6*x + 12

# Метод Золотого сечения
def golden_section_method(f, a, b, tol=1e-5, epsilon=0.5, delta=0.2):
    phi = (1 + np.sqrt(5)) / 2  # Золотое сечение
    resphi = 2 - phi
    c = a + resphi * (b - a)
    d = b - resphi * (b - a)
    fc = f(c)
    fd = f(d)
    steps = []
    n_iterations = 0  # Счетчик итераций

    while abs(b - a) > tol:
        steps.append((a, b, c, d, fc, fd))
        if fc < fd:
            b = d
            d = c
            fd = fc
            c = a + resphi * (b - a)
            fc = f(c)
        else:
            a = c
            c = d
            fc = fd
            d = b - resphi * (b - a)
            fd = f(d)
        n_iterations += 1  # Увеличиваем счетчик на каждой итерации

    xmin = (a + b) / 2
    return xmin, steps, n_iterations

# Интервал и точность
a = 1
b = 11
tol = 1e-5
epsilon = 0.5
delta = 0.2
phi = (1 + np.sqrt(5)) / 2  # Золотое сечение
resphi = 2 - phi

# Нахождение точки минимума
xmin, steps, n_iterations = golden_section_method(f, a, b, tol, epsilon, delta)

# Значение функции в точке минимума
fmin = f(xmin)

# График функции и точки минимума
x = np.linspace(a, b, 500)
y = f(x)

plt.plot(x, y, label='f(x) = x^2 - 6x + 12')
plt.scatter([xmin], [fmin], color='red', zorder=5, label=f'Minimum at x = {xmin:.5f}')
plt.xlabel('x')
plt.ylabel('f(x)')
plt.legend()
plt.title('Golden Section Method')
plt.grid(True)
plt.show()

# Вывод шагов
for step in steps:
    print(f"Interval: [{step[0]:.5f}, {step[1]:.5f}], c = {step[2]:.5f}, d = {step[3]:.5f}, f(c) = {step[4]:.5f}, f(d) = {step[5]:.5f}")

# Оценка теоретического количества итераций для сходимости
theoretical_iterations = np.log(tol / (b - a)) / np.log(resphi)

print(f"\nТочка минимума: x = {xmin:.5f}")
print(f"Значение функции в точке минимума: f(x) = {fmin:.5f}")
print(f"Количество итераций: {n_iterations}")
print(f"Теоретическая оценка количества итераций: {theoretical_iterations:.2f}")














import numpy as np
import matplotlib.pyplot as plt

def f(x):
    return x**2 - 6*x + 12

def golden_section_search(a, b, epsilon):
    phi = (1 + np.sqrt(5)) / 2
    resphi = 2 - phi
    
    c = b - resphi * (b - a)
    d = a + resphi * (b - a)
    steps = []
    
    while abs(b - a) > epsilon:
        if f(c) < f(d):
            b = d
        else:
            a = c
        
        c = b - resphi * (b - a)
        d = a + resphi * (b - a)
        steps.append((a, b))
    
    return (b + a) / 2, steps

a = 1
b = 11
epsilon = 0.5

xmin, steps = golden_section_search(a, b, epsilon)

print(f"Точка минимума: {xmin}")
print(f"Значение функции в точке минимума: {f(xmin)}")
print(f"Конечный интервал: [{steps[-1][0]}, {steps[-1][1]}]")
print("Метод сходится")

# Построение графика
x = np.linspace(a, b, 400)
y = f(x)

plt.plot(x, y, label='f(x)')
plt.scatter(xmin, f(xmin), color='red', label='Minimum')
plt.xlabel('x')
plt.ylabel('f(x)')
plt.legend()
plt.title('Метод золотого сечения')
plt.grid(True)
plt.show()

