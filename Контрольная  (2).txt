Дихотомия


#include <iostream>
#include <cmath>

double func(double x) {
    // Здесь определите вашу функцию
    // Пример: f(x) = x^2 - 4
    return x * x - 4;
}

double bisectionMethod(double a, double b, double tol, double& minimum) {
    if (func(a) * func(b) >= 0) {
        std::cout << "Неправильный выбор начальных точек a и b";
        return 0;
    }

    double c = a;
    while ((b - a) >= tol) {
        // Находим середину отрезка
        c = (a + b) / 2;

        // Если значение функции в c близко к нулю,
        // то мы нашли приближенное решение
        if (func(c) == 0.0) {
            break;
        }
        // Если знаки функции на концах отрезка разные,
        // то продолжаем поиск в нужном направлении
        else if (func(c) * func(a) < 0) {
            b = c;
        } else {
            a = c;
        }
    }

    minimum = c; // Сохраняем точку минимума

    return func(c); // Возвращаем значение функции в найденной точке
}

int main() {
    double a = 1.0; // Начало отрезка
    double b = 3.0; // Конец отрезка
    double tol = 0.0001; // Точность

    double minimum;
    double root = bisectionMethod(a, b, tol, minimum);
    std::cout << "Приближенное значение корня: " << root << std::endl;
    std::cout << "Значение функции в найденной точке: " << func(root) << std::endl;
    std::cout << "Интервал: [" << a << ", " << b << "]" << std::endl;
    std::cout << "Точка минимума: " << minimum << std::endl;

    return 0;
}






ЗОЛОТОЕ СЕЧЕНИЕ

#include <iostream>
#include <cmath>

double func(double x) {
    // Здесь определите вашу функцию
    // Пример: f(x) = x^2 - 4
    return x * x - 4;
}

double goldenSection(double a, double b, double tol) {
    double tau = (sqrt(5.0) - 1.0) / 2.0; // Золотое сечение

    double x1 = b - tau * (b - a);
    double x2 = a + tau * (b - a);

    double f1 = func(x1);
    double f2 = func(x2);

    while ((b - a) > tol) {
        if (f1 < f2) {
            b = x2;
            x2 = x1;
            f2 = f1;
            x1 = b - tau * (b - a);
            f1 = func(x1);
        } else {
            a = x1;
            x1 = x2;
            f1 = f2;
            x2 = a + tau * (b - a);
            f2 = func(x2);
        }
    }

    return (a + b) / 2.0;
}

int main() {
    double a = 1.0; // Начало отрезка
    double b = 3.0; // Конец отрезка
    double tol = 0.0001; // Точность

    double root = goldenSection(a, b, tol);
    std::cout << "Приближенное значение корня: " << root << std::endl;
    std::cout << "Значение функции в найденной точке: " << func(root) << std::endl;
    std::cout << "Интервал: [" << a << ", " << b << "]" << std::endl;

    return 0;
}




фИБОНАЧЧИ
#include <iostream>
#include <cmath>

// Вычисление n-ого числа Фибоначчи
int fibonacci(int n) {
    if (n <= 1)
        return n;
    return fibonacci(n - 1) + fibonacci(n - 2);
}

double func(double x) {
    // Здесь определите вашу функцию
    // Пример: f(x) = x^2 - 4
    return x * x - 4;
}

double fibonacciMethod(double a, double b, double tol, int n) {
    int fib_n = fibonacci(n); // Получаем n-ое число Фибоначчи

    double x1 = a + (static_cast<double>(fibonacci(n - 2)) / fib_n) * (b - a);
    double x2 = a + (static_cast<double>(fibonacci(n - 1)) / fib_n) * (b - a);
    
    double f1 = func(x1);
    double f2 = func(x2);

    for (int k = 1; k <= n - 2; ++k) {
        if (f1 < f2) {
            b = x2;
            x2 = x1;
            f2 = f1;
            x1 = a + (static_cast<double>(fibonacci(n - k - 2)) / fib_n) * (b - a);
            f1 = func(x1);
        } else {
            a = x1;
            x1 = x2;
            f1 = f2;
            x2 = a + (static_cast<double>(fibonacci(n - k - 1)) / fib_n) * (b - a);
            f2 = func(x2);
        }
    }

    return (a + b) / 2.0;
}

int main() {
    double a = 1.0; // Начало отрезка
    double b = 3.0; // Конец отрезка
    double tol = 0.0001; // Точность
    int n = 10; // Количество чисел Фибоначчи (можно изменить по вашему выбору)

    double root = fibonacciMethod(a, b, tol, n);
    std::cout << "Приближенное значение корня: " << root << std::endl;
    std::cout << "Значение функции в найденной точке: " << func(root) << std::endl;
    std::cout << "Интервал: [" << a << ", " << b << "]" << std::endl;

    return 0;
}



Напиши метод Дихотомии на c++


#include <iostream>
#include <cmath>

double func(double x) {
    // Здесь определите вашу функцию
    // Пример: f(x) = x^2 - 4
    return x * x - 4;
}

double dichotomyWithStep(double a, double b, double tol, double step) {
    if (func(a) * func(b) >= 0) {
        std::cout << "Неправильный выбор начальных точек a и b";
        return 0;
    }

    double c = a;
    while ((b - a) >= tol) {
        // Находим середину отрезка
        c = (a + b) / 2;

        // Если значение функции в c близко к нулю,
        // то мы нашли приближенное решение
        if (func(c) == 0.0) {
            break;
        }
        // Если знаки функции на концах отрезка разные,
        // то продолжаем поиск в нужном направлении
        else if (func(c) * func(a) < 0) {
            b = c;
        } else {
            a = c;
        }

        // Перемещаемся на шаг в нужном направлении
        if (b - a < step) {
            break;
        } else if (func(a) < func(b)) {
            a -= step;
        } else {
            b += step;
        }
    }

    return c;
}

int main() {
    double a = 1.0; // Начало отрезка
    double b = 3.0; // Конец отрезка
    double tol = 0.0001; // Точность
    double step = 0.01; // Шаг

    double root = dichotomyWithStep(a, b, tol, step);
    std::cout << "Приближенное значение корня: " << root << std::endl;
    std::cout << "Значение функции в найденной точке: " << func(root) << std::endl;

    return 0;
}
