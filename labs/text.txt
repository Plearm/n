–î–ª—è 6-–≥–æ –∑–∞–¥–∞–Ω–∏—è

Client client1 = new Client("–û–û–û –†–æ–º–∞—à–∫–∞", "–û–û–û", "–ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, 1", "+79123456789", "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤");
Console.WriteLine(client1);

Client client2 = new Client("–ó–ê–û –õ–∏–ª–∏—è;–ó–ê–û;–°–ü–±, —É–ª. –ü—É—à–∫–∏–Ω–∞, 10;+79223334455;–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤");
Console.WriteLine(client2);

string json = "{\"Name\":\"–ò–ü –í–∞—Å–∏–ª—å–µ–≤\",\"OwnershipType\":\"–ò–ü\",\"Address\":\"–ö–∞–∑–∞–Ω—å, —É–ª. –°–æ–≤–µ—Ç—Å–∫–∞—è, 3\",\"Phone\":\"+79998887766\",\"ContactPerson\":\"–í–∞—Å–∏–ª–∏–π\"}";
Client client3 = new Client(json, true);
Console.WriteLine(client3);





using System;
using System.Text.Json;
using System.Text.RegularExpressions;

public class Client
{
    // –ü–æ–ª—è –∫–ª–∞—Å—Å–∞ (–∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä–æ–≤–∞–Ω—ã)
    private string name;
    private string ownershipType;
    private string address;
    private string phone;
    private string contactPerson;

    // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    public Client(string name, string ownershipType, string address, string phone, string contactPerson)
    {
        Validate(name, ownershipType, address, phone, contactPerson);
        this.name = name;
        this.ownershipType = ownershipType;
        this.address = address;
        this.phone = phone;
        this.contactPerson = contactPerson;
    }

    // –ü–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä: —Å—Ç—Ä–æ–∫–∞ (—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–∞—è ;)
    public Client(string data)
    {
        string[] parts = data.Split(';');
        if (parts.Length != 5)
        {
            throw new ArgumentException("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 5 –∑–Ω–∞—á–µ–Ω–∏–π, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö ';'");
        }

        Validate(parts[0], parts[1], parts[2], parts[3], parts[4]);
        this.name = parts[0];
        this.ownershipType = parts[1];
        this.address = parts[2];
        this.phone = parts[3];
        this.contactPerson = parts[4];
    }

    // –ü–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä: JSON
    public Client(JsonElement json)
    {
        try
        {
            string name = json.GetProperty("name").GetString();
            string ownershipType = json.GetProperty("ownershipType").GetString();
            string address = json.GetProperty("address").GetString();
            string phone = json.GetProperty("phone").GetString();
            string contactPerson = json.GetProperty("contactPerson").GetString();

            Validate(name, ownershipType, address, phone, contactPerson);

            this.name = name;
            this.ownershipType = ownershipType;
            this.address = address;
            this.phone = phone;
            this.contactPerson = contactPerson;
        }
        catch (Exception ex)
        {
            throw new ArgumentException("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON: " + ex.Message);
        }
    }

    // üîπ –û–±—â–∏–π –º–µ—Ç–æ–¥ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
    private static void Validate(string name, string ownershipType, string address, string phone, string contactPerson)
    {
        if (!ValidateName(name)) throw new ArgumentException("–û—à–∏–±–∫–∞: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
        if (!ValidateOwnershipType(ownershipType)) throw new ArgumentException("–û—à–∏–±–∫–∞: –í–∏–¥ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.");
        if (!ValidateAddress(address)) throw new ArgumentException("–û—à–∏–±–∫–∞: –ê–¥—Ä–µ—Å –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
        if (!ValidatePhone(phone)) throw new ArgumentException("–û—à–∏–±–∫–∞: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7 (XXX) XXX-XX-XX.");
        if (!ValidateContactPerson(contactPerson)) throw new ArgumentException("–û—à–∏–±–∫–∞: –ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
    }

    // üîπ 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
    private static bool ValidateName(string name)
    {
        return !string.IsNullOrWhiteSpace(name);
    }

    // üîπ 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
    private static bool ValidateOwnershipType(string ownershipType)
    {
        string[] validTypes = { "–û–û–û", "–ò–ü", "–ó–ê–û", "–û–ê–û" };
        return Array.Exists(validTypes, type => type == ownershipType);
    }

    // üîπ 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞
    private static bool ValidateAddress(string address)
    {
        return !string.IsNullOrWhiteSpace(address);
    }

    // üîπ 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+7 (XXX) XXX-XX-XX)
    private static bool ValidatePhone(string phone)
    {
        return Regex.IsMatch(phone, @"^\+7 \(\d{3}\) \d{3}-\d{2}-\d{2}$");
    }

    // üîπ 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞
    private static bool ValidateContactPerson(string contactPerson)
    {
        return !string.IsNullOrWhiteSpace(contactPerson);
    }

    // –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    public void DisplayFullInfo()
    {
        Console.WriteLine($"–ù–∞–∑–≤–∞–Ω–∏–µ: {name}");
        Console.WriteLine($"–í–∏–¥ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏: {ownershipType}");
        Console.WriteLine($"–ê–¥—Ä–µ—Å: {address}");
        Console.WriteLine($"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}");
        Console.WriteLine($"–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ: {contactPerson}");
    }
}
