using System;
using System.Text.Json;
using System.Text.RegularExpressions;

// –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è #3 - –ö–ª–∞—Å—Å Client
public class Client
{
    private string _name;
    private string _ownershipType;
    private string _address;
    private string _phone;
    private string _contactPerson;

    public Client(string name, string ownershipType, string address, string phone, string contactPerson)
    {
        if (!Validator.ValidateName(name)) throw new ArgumentException("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏");
        if (!Validator.ValidateOwnershipType(ownershipType)) throw new ArgumentException("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏");
        if (!Validator.ValidateAddress(address)) throw new ArgumentException("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å");
        if (!Validator.ValidatePhone(phone)) throw new ArgumentException("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞");
        if (!Validator.ValidateContactPerson(contactPerson)) throw new ArgumentException("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ");

        _name = name;
        _ownershipType = ownershipType;
        _address = address;
        _phone = phone;
        _contactPerson = contactPerson;
    }

    public string Name => _name;
    public string OwnershipType => _ownershipType;
    public string Address => _address;
    public string Phone => _phone;
    public string ContactPerson => _contactPerson;

    public void DisplayFullInfo()
    {
        Console.WriteLine($"–ù–∞–∑–≤–∞–Ω–∏–µ: {_name}\n–í–∏–¥ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏: {_ownershipType}\n–ê–¥—Ä–µ—Å: {_address}\n–¢–µ–ª–µ—Ñ–æ–Ω: {_phone}\n–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ: {_contactPerson}");
    }

    public override string ToString()
    {
        return $"–ö–æ–º–ø–∞–Ω–∏—è: {_name}, –¢–µ–ª–µ—Ñ–æ–Ω: {_phone}, –ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ: {_contactPerson}";
    }
}

// –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è #6 - –ü–µ—Ä–µ–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤
// üîπ **1. –û–±—ã—á–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä (—Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö)**
public Client(string name, string ownershipType, string address, string phone, string contactPerson)
    {
        Name = name;
        OwnershipType = ownershipType;
        Address = address;
        Phone = phone;
        ContactPerson = contactPerson;
    }

    // üîπ **2. –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏–∑ —Å—Ç—Ä–æ–∫–∏ (CSV-—Ñ–æ—Ä–º–∞—Ç)**
public Client(string csvLine)
    {
        var parts = csvLine.Split(';');
        if (parts.Length != 5) throw new ArgumentException("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏. –û–∂–∏–¥–∞–µ—Ç—Å—è 5 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.");

        Name = parts[0];
        OwnershipType = parts[1];
        Address = parts[2];
        Phone = parts[3];
        ContactPerson = parts[4];
    }

    // üîπ **3. –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏–∑ JSON (–∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É Newtonsoft.Json)**
public Client(string json, bool isJson)
    {
        if (!isJson) throw new ArgumentException("–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑ JSON –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞—Ç—å 'true' –≤—Ç–æ—Ä—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º.");

        var obj = JsonConvert.DeserializeObject<Client>(json);
        if (obj == null) throw new ArgumentException("–û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ JSON.");

        Name = obj.Name;
        OwnershipType = obj.OwnershipType;
        Address = obj.Address;
        Phone = obj.Phone;
        ContactPerson = obj.ContactPerson;
    }

// –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è #7 - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—ã–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
public class ClientShort
{
    public string Name { get; }
    public string Phone { get; }
    public string ContactPerson { get; }

    public ClientShort(Client client)
    {
        Name = client.Name;
        Phone = client.Phone;
        ContactPerson = client.ContactPerson;
    }

    public override string ToString()
    {
        return $"–ö–æ–º–ø–∞–Ω–∏—è: {Name}, –¢–µ–ª–µ—Ñ–æ–Ω: {Phone}, –ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ: {ContactPerson}";
    }
}

// –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è #8, #9 - –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
public class BusinessClient : Client
{
    public string INN { get; }
    public string OGRN { get; }

    public BusinessClient(string name, string ownershipType, string address, string phone, string contactPerson, string inn, string ogrn)
        : base(name, ownershipType, address, phone, contactPerson)
    {
        INN = inn;
        OGRN = ogrn;
    }
    public override bool Equals(object? obj)
    {
        if (!base.Equals(obj)) return false;
        if (obj is not BusinessClient other) return false;

        return INN == other.INN && OGRN == other.OGRN;
    }

    public override string ToString()
    {
        return base.ToString() + $"\n–ò–ù–ù: {INN}\n–û–ì–†–ù: {OGRN}";
    }
}

class Program
{
    static void Main()
    {
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        Client client = new Client("–û–û–û –†–æ–º–∞—à–∫–∞", "–û–û–û", "–ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥.1", "+71234567890", "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤");
        client.DisplayFullInfo();
        
        ClientShort shortClient = new ClientShort(client);
        shortClient.DisplayShortInfo();

        BusinessClient businessClient = new BusinessClient("–û–û–û –õ–∏–ª–∏—è", "–û–û–û", "–°–ü–±, —É–ª. –ö–∏—Ä–æ–≤–∞, –¥.5", "+79876543210", "–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤", "1234567890", "0987654321");
        businessClient.DisplayFullInfo();
    }
}
